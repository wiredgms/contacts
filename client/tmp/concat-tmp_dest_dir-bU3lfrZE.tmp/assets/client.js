eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"client/app\", \n  [\"ember\",\"ember-data\",\"ember/resolver\",\"ember/load-initializers\",\"client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n    var Resolver = __dependency3__[\"default\"];\n    var loadInitializers = __dependency4__[\"default\"];\n    var config = __dependency5__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var adapter;\n    var env = config.environment; \n    if (env === \'test\') {\n      adapter = DS.FixtureAdapter.extend({\n        latency: 500\n      });\n    } else {\n      adapter = DS.ActiveModelAdapter;\n    }\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver,\n      ApplicationAdapter: adapter\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=client/app.js");

;eval("define(\"client/components/action-button\", \n  [\"ember\",\"ember-cli-filtertable/components/action-button\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var ActionButton = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ActionButton;\n  });//# sourceURL=client/components/action-button.js");

;eval("define(\"client/components/async-button\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: \'button\',\n      textState: \'default\',\n      reset: false,\n      classNames: [\'async-button\'],\n      classNameBindings: [\'textState\'],\n      attributeBindings: [\'disabled\', \'type\'],\n\n      type: \'submit\',\n      disabled: Ember.computed.equal(\'textState\',\'pending\'),\n\n      click: function() {\n        var _this = this;\n        this.sendAction(\'action\', function(promise){\n          _this.set(\'promise\', promise);\n        });\n        this.set(\'textState\', \'pending\');\n\n        // If this is part of a form, it will perform an HTML form\n        // submission\n        return false;\n      },\n\n      text: Ember.computed(\'textState\', \'default\', \'pending\', \'resolved\', \'fulfilled\', \'rejected\', function() {\n        return this.getWithDefault(this.textState, this.get(\'default\'));\n      }),\n\n      resetObserver: Ember.observer(\'textState\', \'reset\', function(){\n        if(this.get(\'reset\') && [\'resolved\', \'rejected\', \'fulfilled\'].contains(this.get(\'textState\'))){\n          this.set(\'textState\', \'default\');\n        }\n      }),\n\n      handleActionPromise: Ember.observer(\'promise\', function() {\n        var _this = this;\n        this.get(\'promise\').then(function() {\n          if (!_this.isDestroyed) {\n            _this.set(\'textState\', \'fulfilled\');\n          }\n        })[\"catch\"](function() {\n          if (!_this.isDestroyed) {\n            _this.set(\'textState\', \'rejected\');\n          }\n        });\n      }),\n\n      setUnknownProperty: function(key, value) {\n        if (key === \'resolved\') {\n          Ember.deprecate(\"The \'resolved\' property is deprecated. Please use \'fulfilled\'\", false);\n          key = \'fulfilled\';\n        }\n\n        this[key] = null;\n        this.set(key, value);\n      }\n    });\n  });//# sourceURL=client/components/async-button.js");

;eval("define(\"client/components/filter-table\", \n  [\"ember\",\"ember-cli-filtertable/components/filter-table\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var Filtertable = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Filtertable;\n  });//# sourceURL=client/components/filter-table.js");

;eval("define(\"client/components/growl-instance\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: [\'growl-instance\'],\n      classNameBindings: [\'type\'],\n      type: function() {\n        return this.get(\'notification.options.type\');\n      }.property(),\n      click: function() {\n        this.destroyAlert();\n      },\n      didInsertElement: function() {\n        if (this.get(\'notification.options.fadeIn\')) {\n          this.$().hide().fadeIn();\n        }\n\n        if (this.get(\'notification.options.twitch\')) {\n          var el = this.$(),\n              maxDegree = 1,\n              negative;\n          var interval = window.setInterval(function() {\n            negative = negative ? \'\' : \'-\';\n            el.css(\'transform\', \'rotate(\' + negative + maxDegree + \'deg)\');\n          }, 75);\n          Ember.run.later(function() {\n            el.css(\'transform\', \'rotate(0deg)\');\n            window.clearInterval(interval);\n          }, 400);\n        }\n\n        // unless a click-to-dismiss is required we auto close\n        if ( ! this.get(\'notification.options.clickToDismiss\')) {\n          Ember.run.later(this, this.destroyAlert, this.get(\'notification.options.closeIn\'));\n        }\n      },\n      destroyAlert: function() {\n        var self = this;\n        if (this.$()) {\n          this.$().fadeOut(Ember.run(this, function() {\n            // send the action on up so the manager can remove this item from array\n            self.sendAction(\'action\', self.get(\'notification\'));\n          }));\n        } else {\n          self.sendAction(\'action\', self.get(\'notification\'));\n        }\n      },\n      actions: {\n        dismiss: function() {\n          // a close button has been clicked\n          this.destroyAlert();\n        }\n      }\n    });\n  });//# sourceURL=client/components/growl-instance.js");

;eval("define(\"client/components/growl-manager\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: [\'growl-manager\'],\n      actions: {\n        dismiss: function(notification) {\n          this.get(\'notifications\').removeObject(notification);\n        }\n      }\n    });\n  });//# sourceURL=client/components/growl-manager.js");

;eval("define(\"client/components/type-ahead\", \n  [\"ember\",\"ember-cli-typeahead/components/type-ahead\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var Typeahead = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Typeahead;\n  });//# sourceURL=client/components/type-ahead.js");

;eval("define(\"client/controllers/contacts\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n    });\n  });//# sourceURL=client/controllers/contacts.js");

;eval("define(\"client/helpers/tree-tab\", \n  [\"ember\",\"ember-cli-filtertable/helpers/tree-tab\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var Treetab = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Treetab;\n  });//# sourceURL=client/helpers/tree-tab.js");

;eval("define(\"client/initializers/export-application-global\", \n  [\"ember\",\"client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=client/initializers/export-application-global.js");

;eval("define(\"client/initializers/growl\", \n  [\"client/services/growl\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Growl = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: \'growl\',\n      initialize: function(container, app) {\n        Growl.reopenClass({\n          container: container\n        });\n\n        app.register(\'growl:main\', Growl);\n        app.inject(\'route\', \'growl\', \'growl:main\');\n        app.inject(\'controller\', \'growl\', \'growl:main\');\n      }\n    };\n  });//# sourceURL=client/initializers/growl.js");

;eval("define(\"client/services/growl\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      notifications: Ember.A(),\n      error: function(context, opts) {\n        opts = opts || {};\n        opts.type = \'error\';\n        this._notify.call(this, context, opts);\n      },\n      alert: function(context, opts) {\n        opts = opts || {};\n        opts.type = \'alert\';\n        this._notify.call(this, context, opts);\n      },\n      info: function(context, opts) {\n        opts = opts || {};\n        opts.type = \'info\';\n        this._notify.call(this, context, opts);\n      },\n\n      _notify: function(context, opts) {\n        // default options\n        var options = {\n          type: \'error\',\n          fadeIn: true,\n          closeIn: 5000, // automatically close in 5 seconds.\n          clickToDismiss: false, // stay open until it receives a click?\n          twitch: false\n        };\n\n        Ember.merge(options, opts);\n\n        // if the developer passed an identical message then we just update\n        // the open notification balloon options\n        var existing = this.get(\'notifications\').findBy(\'content\', context);\n        if (existing) {\n          return;\n        }\n\n        var notification = Ember.ObjectProxy.extend({\n          // {{notification.content}} for a string or {{notification.foo}} if you\n          // pass an object from a route via this.growl.error({foo: \'bar\'});\n          content: context,\n          options: options,\n          updated: 0,\n          isInfo: function() {\n            return options.type === \'info\';\n          }.property(),\n          isAlert: function() {\n            return options.type === \'alert\';\n          }.property(),\n          isError: function() {\n            return options.type === \'error\';\n          }.property()\n        }).create();\n\n        this.get(\'notifications\').pushObject(notification);\n      }\n    });\n  });//# sourceURL=client/services/growl.js");

;eval("define(\"client/models/contact\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var attr = DS.attr;\n    var Contact = DS.Model.extend({\n    	firstName: attr(\'string\'),\n    	lastName: attr(\'string\'),\n    	middleInitial: attr(\'string\'),\n    	title: attr(\'string\'),\n    	phoneNumber: attr(\'string\'),\n    	email: attr(\'string\'),\n    	streetAddress: attr(\'string\'),\n    	city: attr(\'string\'),\n    	state: attr(\'string\'),\n    	zipCode: attr(\'string\'),\n    	createdAt: attr(\'date\'),\n    	updatedAt: attr(\'date\'),\n    	fullName: function() {\n    		var middleInitial = this.get(\'middleInitial\') ? this.get(\'middleInitial\') + \' \' : \'\';\n    		return this.get(\'firstName\') + \' \' + middleInitial + this.get(\'lastName\');\n    	}.property(\'firstName\', \'lastName\', \'middleInitial\')\n    });\n\n    Contact.reopenClass({\n    	FIXTURES: [\n    		{\n    			id: 1,\n    			firstName: \"Fred\",	\n    			lastName: \"Jones\",\n    			middleInitial: \"P\",\n    			phoneNumber: \"(555) 333-4444\",\n    			email: \"fjones@test.com\",\n    			streetAddress: \"123 Some Street\",\n    			city: \"Some City\",\n    			state: \"Nevada\",\n    			zipCode: \"12123\"\n    		},\n    		{\n    			id: 2,\n    			firstName: \"Susie\",	\n    			lastName: \"Thomas\",\n    			title: \"PhD\",\n    			phoneNumber: \"(555) 444-3333\",\n    			email: \"sthomas@test.com\",\n    			streetAddress: \"123 Another Street\",\n    			city: \"Another City\",\n    			state: \"Arizona\",\n    			zipCode: \"22211\"\n    		}\n    	]\n    });\n\n    __exports__[\"default\"] = Contact;\n  });//# sourceURL=client/models/contact.js");

;eval("define(\"client/router\", \n  [\"ember\",\"client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n        location: config.locationType\n    });\n\n    Router.map(function() {\n        this.resource(\'contacts\', {path: \'/contacts\'}, function() {\n        	this.resource(\'contact\', {path: \'/:contact_id\'}, function() {\n        	});\n        });\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=client/router.js");

;eval("define(\"client/routes/contact\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n    	model: function(params) {\n    		return this.store.find(\'contact\', params.contact_id);\n    	}\n    });\n  });//# sourceURL=client/routes/contact.js");

;eval("define(\"client/routes/contacts\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n    	model: function() {\n    		return this.store.find(\'contact\');\n    	}\n    });\n  });//# sourceURL=client/routes/contacts.js");

;eval("define(\"client/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/application.js");

;eval("define(\"client/templates/components/action-button\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n  <span \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":glyphicon glyphicon\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></span>\\n\");\n      return buffer;\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"hasGlyph\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n<span>\");\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/components/action-button.js");

;eval("define(\"client/templates/components/async-button\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n  \");\n      stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n  \");\n      stack1 = helpers._triageMustache.call(depth0, \"view.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"template\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/components/async-button.js");

;eval("define(\"client/templates/components/filter-table\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n  <tr><th \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'colspan\': (\"headerFilterColspan\")\n      },hashTypes:{\'colspan\': \"ID\"},hashContexts:{\'colspan\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"text\"),\n        \'value\': (\"textFilter\"),\n        \'autofocus\': (\"autofocus\"),\n        \'placeholder\': (\"Enter search filter\"),\n        \'class\': (\"form-control\")\n      },hashTypes:{\'type\': \"STRING\",\'value\': \"ID\",\'autofocus\': \"STRING\",\'placeholder\': \"STRING\",\'class\': \"STRING\"},hashContexts:{\'type\': depth0,\'value\': depth0,\'autofocus\': depth0,\'placeholder\': depth0,\'class\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n  </th></tr>\\n\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n  <th class=\\\"checkbox-all\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'name\': (\"allSelected\"),\n        \'checked\': (\"selectAll\")\n      },hashTypes:{\'type\': \"STRING\",\'name\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'name\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</th>\\n\");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n  <tr><td \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'colspan\': (\"headerFilterColspan\")\n      },hashTypes:{\'colspan\': \"ID\"},hashContexts:{\'colspan\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"><span class=\\\"label label-danger\\\">Note:</span> No records exist yet</td></tr>\\n\");\n      return buffer;\n      }\n\n    function program7(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers[\'if\'].call(depth0, \"hasNoFilteredRecords\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n    function program8(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n  <tr><td \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'colspan\': (\"headerFilterColspan\")\n      },hashTypes:{\'colspan\': \"ID\"},hashContexts:{\'colspan\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"><span class=\\\"label label-warning\\\">Note:</span> No records match your filter</td></tr>\\n\");\n      return buffer;\n      }\n\n    function program10(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n\");\n      stack1 = helpers.each.call(depth0, \"r\", \"in\", \"filteredRecords\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n    function program11(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n  <tr>\\n  \");\n      stack1 = helpers[\'if\'].call(depth0, \"showCheckboxes\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"bodyTemplate\", options) : helperMissing.call(depth0, \"partial\", \"bodyTemplate\", options))));\n      data.buffer.push(\"\\n  </tr>\\n\");\n      return buffer;\n      }\n    function program12(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n  <td>\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'name\': (\"r.selected\"),\n        \'checked\': (\"r.selected\")\n      },hashTypes:{\'type\': \"STRING\",\'name\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'name\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</td>\\n  \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<table class=\\\"table table-striped table-hovered filtertable\\\">\\n<thead>\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"showTextFilter\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n<tr>\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"showCheckboxes\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"headerTemplate\", options) : helperMissing.call(depth0, \"partial\", \"headerTemplate\", options))));\n      data.buffer.push(\"\\n</tr>\\n</thead>\\n<tbody>\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"hasNoActualRecords\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</tbody>\\n</table>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/components/filter-table.js");

;eval("define(\"client/templates/components/growl-instance\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n  <img src=\\\"../img/error.svg\\\" alt=\\\"Error\\\"/>\\n\");\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n  <img src=\\\"../img/alert.svg\\\" alt=\\\"Alert\\\"/>\\n\");\n      }\n\n    function program5(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n  <img src=\\\"../img/info.svg\\\" alt=\\\"Info\\\"/>\\n\");\n      }\n\n    function program7(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n    <h1>Uh oh.</h1>\\n  \");\n      }\n\n    function program9(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n    <h1>Attention!</h1>\\n  \");\n      }\n\n    function program11(depth0,data) {\n      \n      \n      data.buffer.push(\"\\n    <h1>Hey!</h1>\\n  \");\n      }\n\n      data.buffer.push(\"\\n\");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isError\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isError\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n\");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isAlert\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isAlert\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n\");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isInfo\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isInfo\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<div class=\\\"message-area\\\">\\n  \");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isError\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isError\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n  \");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isAlert\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isAlert\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n  \");\n      stack1 = (helper = helpers.unboundIf || (depth0 && depth0.unboundIf),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"notification.isInfo\", options) : helperMissing.call(depth0, \"unboundIf\", \"notification.isInfo\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n  <div class=\\\"message\\\">\\n    \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"notification.content\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/components/growl-instance.js");

;eval("define(\"client/templates/components/growl-manager\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers[\'growl-instance\'] || (depth0 && depth0[\'growl-instance\']),options={hash:{\n        \'action\': (\"dismiss\"),\n        \'notification\': (\"\")\n      },hashTypes:{\'action\': \"STRING\",\'notification\': \"ID\"},hashContexts:{\'action\': depth0,\'notification\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"growl-instance\", options))));\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n\n      data.buffer.push(\"\\n\");\n      stack1 = helpers.each.call(depth0, \"notifications\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/components/growl-manager.js");

;eval("define(\"client/templates/contact\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<ul id=\\\"contact\\\">\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"fullName\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"phoneNumber\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"email\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"streetAddress\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"city\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"state\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n	<li>\\n		\");\n      stack1 = helpers._triageMustache.call(depth0, \"zipCode\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n	</li>\\n</ul>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/contact.js");

;eval("define(\"client/templates/contacts\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers[\'filter-table\'] || (depth0 && depth0[\'filter-table\']),options={hash:{\n        \'content\': (\"model\"),\n        \'columnNum\': (2),\n        \'showCheckboxes\': (false),\n        \'filterField\': (\"fullName\"),\n        \'bodyTemplate\': (\"table-body\"),\n        \'headerTemplate\': (\"table-header\")\n      },hashTypes:{\'content\': \"ID\",\'columnNum\': \"INTEGER\",\'showCheckboxes\': \"BOOLEAN\",\'filterField\': \"STRING\",\'bodyTemplate\': \"STRING\",\'headerTemplate\': \"STRING\"},hashContexts:{\'content\': depth0,\'columnNum\': depth0,\'showCheckboxes\': depth0,\'filterField\': depth0,\'bodyTemplate\': depth0,\'headerTemplate\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"filter-table\", options))));\n      data.buffer.push(\"\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/contacts.js");

;eval("define(\"client/templates/table-body\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"r.fullName\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n      data.buffer.push(\"<td>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"contact\", \"r\", options) : helperMissing.call(depth0, \"link-to\", \"contact\", \"r\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n<td>\");\n      stack1 = helpers._triageMustache.call(depth0, \"r.phoneNumber\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=client/templates/table-body.js");

;eval("define(\"client/templates/table-header\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<th>Name</th>\\n<th>Phone Number</th>\");\n      \n    });\n  });//# sourceURL=client/templates/table-header.js");

;eval("define(\"client/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/app.jshint.js");

;eval("define(\"client/tests/client/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/helpers\');\n    test(\'client/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'client/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/helpers/resolver.jshint.js");

;eval("define(\"client/tests/client/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/helpers\');\n    test(\'client/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'client/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/helpers/start-app.jshint.js");

;eval("define(\"client/tests/client/tests/integration/integration-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/integration\');\n    test(\'client/tests/integration/integration-test.js should pass jshint\', function() { \n      ok(true, \'client/tests/integration/integration-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/integration/integration-test.jshint.js");

;eval("define(\"client/tests/client/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests\');\n    test(\'client/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'client/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/test-helper.jshint.js");

;eval("define(\"client/tests/client/tests/unit/controllers/contacts-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/unit/controllers\');\n    test(\'client/tests/unit/controllers/contacts-test.js should pass jshint\', function() { \n      ok(true, \'client/tests/unit/controllers/contacts-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/unit/controllers/contacts-test.jshint.js");

;eval("define(\"client/tests/client/tests/unit/models/contact-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/unit/models\');\n    test(\'client/tests/unit/models/contact-test.js should pass jshint\', function() { \n      ok(true, \'client/tests/unit/models/contact-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/unit/models/contact-test.jshint.js");

;eval("define(\"client/tests/client/tests/unit/routes/contact-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/unit/routes\');\n    test(\'client/tests/unit/routes/contact-test.js should pass jshint\', function() { \n      ok(true, \'client/tests/unit/routes/contact-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/unit/routes/contact-test.jshint.js");

;eval("define(\"client/tests/client/tests/unit/routes/contacts-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - client/tests/unit/routes\');\n    test(\'client/tests/unit/routes/contacts-test.js should pass jshint\', function() { \n      ok(true, \'client/tests/unit/routes/contacts-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/client/tests/unit/routes/contacts-test.jshint.js");

;eval("define(\"client/tests/controllers/contacts.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/contacts.js should pass jshint\', function() { \n      ok(true, \'controllers/contacts.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/controllers/contacts.jshint.js");

;eval("define(\"client/tests/helpers/resolver\", \n  [\"ember/resolver\",\"client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=client/tests/helpers/resolver.js");

;eval("define(\"client/tests/helpers/start-app\", \n  [\"ember\",\"client/app\",\"client/router\",\"client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=client/tests/helpers/start-app.js");

;eval("define(\"client/tests/integration/integration-test\", \n  [\"ember\",\"ember-qunit\",\"client/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var startApp = __dependency3__[\"default\"];\n\n    var App;\n\n    module(\'Integration Test\', {\n        needs: [],\n        setup: function() {\n            App = startApp();\n        },\n        teardown: function() {\n            Ember.run(App, App.destroy);\n        }\n    });\n    test(\"Page features\", function() {\n        expect(6);\n        visit(\'/contacts\').then(function() {\n            // We should have a filtertable on the screen\n            equal($(\'.filtertable\').length, 1);\n            // We want to make sure we have two contacts in the table\n            equal($(\'.filtertable tbody tr\').length, 2);\n            // Now check the values in one of our rows\n            equal($(\'.filtertable tbody tr:first td:first a\').text(), \'Fred P Jones\');\n            equal($(\'.filtertable tbody tr:first td:last\').text(), \'(555) 333-4444\');\n        });\n        visit(\'/contacts/1\').then(function() {\n        	// We should have a contact on the page\n        	equal($(\'#contact\').length, 1);\n        	equal($(\'#contact li:first\').text().trim(), \'Fred P Jones\');\n        });\n    });\n  });//# sourceURL=client/tests/integration/integration-test.js");

;eval("define(\"client/tests/models/contact.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/contact.js should pass jshint\', function() { \n      ok(true, \'models/contact.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/models/contact.jshint.js");

;eval("define(\"client/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/router.jshint.js");

;eval("define(\"client/tests/routes/contact.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/contact.js should pass jshint\', function() { \n      ok(true, \'routes/contact.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/routes/contact.jshint.js");

;eval("define(\"client/tests/routes/contacts.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/contacts.js should pass jshint\', function() { \n      ok(true, \'routes/contacts.js should pass jshint.\'); \n    });\n  });//# sourceURL=client/tests/routes/contacts.jshint.js");

;eval("define(\"client/tests/test-helper\", \n  [\"client/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=client/tests/test-helper.js");

;eval("define(\"client/tests/unit/controllers/contacts-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:contacts\', \'ContactsController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=client/tests/unit/controllers/contacts-test.js");

;eval("define(\"client/tests/unit/models/contact-test\", \n  [\"ember-qunit\",\"ember\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var moduleForModel = __dependency1__.moduleForModel;\n    var test = __dependency1__.test;\n    var Ember = __dependency2__[\"default\"];\n\n    moduleForModel(\'contact\', \'Contact\', {\n        // Specify the other units that are required for this test.\n        needs: []\n    });\n\n    test(\'our fullName computed property behaves properly\', function() {\n        expect(2);\n        var model = this.subject();\n        // Test first name and last name only\n        Ember.run(function() {\n            model.set(\'firstName\', \'Billy\');\n            model.set(\'lastName\', \'Harris\');\n            equal(model.get(\'fullName\'), \'Billy Harris\');\n        });\n        // Test middle initial\n        Ember.run(function() {\n            model.set(\'middleInitial\', \'B\');\n            equal(model.get(\'fullName\'), \'Billy B Harris\');\n        });\n    });\n  });//# sourceURL=client/tests/unit/models/contact-test.js");

;eval("define(\"client/tests/unit/routes/contact-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'route:contact\', \'ContactRoute\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    test(\'it exists\', function() {\n      var route = this.subject();\n      ok(route);\n    });\n  });//# sourceURL=client/tests/unit/routes/contact-test.js");

;eval("define(\"client/tests/unit/routes/contacts-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'route:contacts\', \'ContactsRoute\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    test(\'it exists\', function() {\n      var route = this.subject();\n      ok(route);\n    });\n  });//# sourceURL=client/tests/unit/routes/contacts-test.js");

/* jshint ignore:start */

define('client/config/environment', ['ember'], function(Ember) {
  var prefix = 'client';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('client/tests/test-helper');
} else {
  require('client/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
