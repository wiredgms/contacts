eval("define(\"ember-validations/errors\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      unknownProperty: function(property) {\n        set(this, property, Ember.A());\n        return get(this, property);\n      }\n    });\n  });//# sourceURL=ember-validations/errors.js");

;eval("define(\"ember-validations/index\", \n  [\"ember-validations/mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Mixin = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      Mixin: Mixin,\n      validator: function(callback) {\n        return { callback: callback };\n      }\n    };\n  });//# sourceURL=ember-validations/index.js");

;eval("define(\"ember-validations/mixin\", \n  [\"ember\",\"ember-validations/errors\",\"ember-validations/validators/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Errors = __dependency2__[\"default\"];\n    var Base = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    var setValidityMixin = Ember.Mixin.create({\n      isValid: Ember.computed(\'validators.@each.isValid\', function() {\n        var compactValidators = get(this, \'validators\').compact();\n        var filteredValidators = Ember.EnumerableUtils.filter(compactValidators, function(validator) {\n          return !get(validator, \'isValid\');\n        });\n\n        return get(filteredValidators, \'length\') === 0;\n      }),\n      isInvalid: Ember.computed.not(\'isValid\')\n    });\n\n    var pushValidatableObject = function(model, property) {\n      var content = get(model, property);\n\n      model.removeObserver(property, pushValidatableObject);\n      if (Ember.isArray(content)) {\n        model.validators.pushObject(ArrayValidatorProxy.create({model: model, property: property, contentBinding: \'model.\' + property}));\n      } else {\n        model.validators.pushObject(content);\n      }\n    };\n\n    var lookupValidator = function(validatorName) {\n      var container = get(this, \'container\');\n      var local = container.lookupFactory(\'validator:local/\'+validatorName);\n      var remote = container.lookupFactory(\'validator:remote/\'+validatorName);\n\n      if (local || remote) { return [local, remote]; }\n\n      var base = container.lookupFactory(\'validator:\'+validatorName);\n\n      if (base) { return [base]; }\n\n      local = container.lookupFactory(\'ember-validations@validator:local/\'+validatorName);\n      remote = container.lookupFactory(\'ember-validations@validator:remote/\'+validatorName);\n\n      if (local || remote) { return [local, remote]; }\n\n      Ember.warn(\'Could not the \"\'+validatorName+\'\" validator.\');\n    };\n\n    var ArrayValidatorProxy = Ember.ArrayProxy.extend(setValidityMixin, {\n      validate: function() {\n        return this._validate();\n      },\n      _validate: Ember.on(\'init\', function() {\n        var promises = get(this, \'content\').invoke(\'_validate\').without(undefined);\n        return Ember.RSVP.all(promises);\n      }),\n      validators: Ember.computed.alias(\'content\')\n    });\n\n    __exports__[\"default\"] = Ember.Mixin.create(setValidityMixin, {\n      init: function() {\n        this._super();\n        this.errors = Errors.create();\n        this.dependentValidationKeys = {};\n        this.validators = Ember.A();\n        if (get(this, \'validations\') === undefined) {\n          this.validations = {};\n        }\n        this.buildValidators();\n        this.validators.forEach(function(validator) {\n          validator.addObserver(\'errors.[]\', this, function(sender) {\n            var errors = Ember.A();\n            this.validators.forEach(function(validator) {\n              if (validator.property === sender.property) {\n                errors.addObjects(validator.errors);\n              }\n            }, this);\n            set(this, \'errors.\' + sender.property, errors);\n          });\n        }, this);\n      },\n      buildValidators: function() {\n        var property;\n\n        for (property in this.validations) {\n          if (this.validations[property].constructor === Object) {\n            this.buildRuleValidator(property);\n          } else {\n            this.buildObjectValidator(property);\n          }\n        }\n      },\n      buildRuleValidator: function(property) {\n        var pushValidator = function(validator) {\n          if (validator) {\n            this.validators.pushObject(validator.create({model: this, property: property, options: this.validations[property][validatorName]}));\n          }\n        };\n\n        if (this.validations[property].callback) {\n          this.validations[property] = { inline: this.validations[property] };\n        }\n\n        var createInlineClass = function(callback) {\n          return Base.extend({\n            call: function() {\n              var errorMessage = this.callback.call(this);\n\n              if (errorMessage) {\n                this.errors.pushObject(errorMessage);\n              }\n            },\n            callback: callback\n          });\n        };\n\n        for (var validatorName in this.validations[property]) {\n          if (validatorName === \'inline\') {\n            pushValidator.call(this, createInlineClass(this.validations[property][validatorName].callback));\n          } else if (this.validations[property].hasOwnProperty(validatorName)) {\n            Ember.EnumerableUtils.forEach(lookupValidator.call(this, validatorName), pushValidator, this);\n          }\n        }\n      },\n      buildObjectValidator: function(property) {\n        if (Ember.isNone(get(this, property))) {\n          this.addObserver(property, this, pushValidatableObject);\n        } else {\n          pushValidatableObject(this, property);\n        }\n      },\n      validate: function() {\n        var self = this;\n        return this._validate().then(function(vals) {\n          var errors = get(self, \'errors\');\n          if (Ember.EnumerableUtils.indexOf(vals, false) > -1) {\n            return Ember.RSVP.reject(errors);\n          }\n          return errors;\n        });\n      },\n      _validate: Ember.on(\'init\', function() {\n        var promises = this.validators.invoke(\'_validate\').without(undefined);\n        return Ember.RSVP.all(promises);\n      })\n    });\n  });//# sourceURL=ember-validations/mixin.js");

;eval("define(\"ember-validations/validators/base\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      init: function() {\n        set(this, \'errors\', Ember.A());\n        this.dependentValidationKeys = Ember.A();\n        this.conditionals = {\n          \'if\': get(this, \'options.if\'),\n          unless: get(this, \'options.unless\')\n        };\n        this.model.addObserver(this.property, this, this._validate);\n      },\n      addObserversForDependentValidationKeys: Ember.on(\'init\', function() {\n        this.dependentValidationKeys.forEach(function(key) {\n          this.model.addObserver(key, this, this._validate);\n        }, this);\n      }),\n      pushDependentValidationKeyToModel: Ember.on(\'init\', function() {\n        var model = get(this, \'model\');\n        if (model.dependentValidationKeys[this.property] === undefined) {\n          model.dependentValidationKeys[this.property] = Ember.A();\n        }\n        model.dependentValidationKeys[this.property].addObjects(this.dependentValidationKeys);\n      }),\n      call: function () {\n        throw \'Not implemented!\';\n      },\n      unknownProperty: function(key) {\n        var model = get(this, \'model\');\n        if (model) {\n          return get(model, key);\n        }\n      },\n      isValid: Ember.computed.empty(\'errors.[]\'),\n      validate: function() {\n        var self = this;\n        return this._validate().then(function(success) {\n          // Convert validation failures to rejects.\n          var errors = get(self, \'model.errors\');\n          if (success) {\n            return errors;\n          } else {\n            return Ember.RSVP.reject(errors);\n          }\n        });\n      },\n      _validate: Ember.on(\'init\', function() {\n        this.errors.clear();\n        if (this.canValidate()) {\n          this.call();\n        }\n        if (get(this, \'isValid\')) {\n          return Ember.RSVP.resolve(true);\n        } else {\n          return Ember.RSVP.resolve(false);\n        }\n      }),\n      canValidate: function() {\n        if (typeof(this.conditionals) === \'object\') {\n          if (this.conditionals[\'if\']) {\n            if (typeof(this.conditionals[\'if\']) === \'function\') {\n              return this.conditionals[\'if\'](this.model, this.property);\n            } else if (typeof(this.conditionals[\'if\']) === \'string\') {\n              if (typeof(this.model[this.conditionals[\'if\']]) === \'function\') {\n                return this.model[this.conditionals[\'if\']]();\n              } else {\n                return get(this.model, this.conditionals[\'if\']);\n              }\n            }\n          } else if (this.conditionals.unless) {\n            if (typeof(this.conditionals.unless) === \'function\') {\n              return !this.conditionals.unless(this.model, this.property);\n            } else if (typeof(this.conditionals.unless) === \'string\') {\n              if (typeof(this.model[this.conditionals.unless]) === \'function\') {\n                return !this.model[this.conditionals.unless]();\n              } else {\n                return !get(this.model, this.conditionals.unless);\n              }\n            }\n          } else {\n            return true;\n          }\n        } else {\n          return true;\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/base.js");

;eval("define(\"ember-validations/messages\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      render: function(attribute, context) {\n        if (Ember.I18n) {\n          return Ember.I18n.t(\'errors.\' + attribute, context);\n        } else {\n          var regex = new RegExp(\"{{(.*?)}}\"),\n              attributeName = \"\";\n          if (regex.test(this.defaults[attribute])) {\n            attributeName = regex.exec(this.defaults[attribute])[1];\n          }\n          return this.defaults[attribute].replace(regex, context[attributeName]);\n        }\n      },\n      defaults: {\n        inclusion: \"is not included in the list\",\n        exclusion: \"is reserved\",\n        invalid: \"is invalid\",\n        confirmation: \"doesn\'t match {{attribute}}\",\n        accepted: \"must be accepted\",\n        empty: \"can\'t be empty\",\n        blank: \"can\'t be blank\",\n        present: \"must be blank\",\n        tooLong: \"is too long (maximum is {{count}} characters)\",\n        tooShort: \"is too short (minimum is {{count}} characters)\",\n        wrongLength: \"is the wrong length (should be {{count}} characters)\",\n        notANumber: \"is not a number\",\n        notAnInteger: \"must be an integer\",\n        greaterThan: \"must be greater than {{count}}\",\n        greaterThanOrEqualTo: \"must be greater than or equal to {{count}}\",\n        equalTo: \"must be equal to {{count}}\",\n        lessThan: \"must be less than {{count}}\",\n        lessThanOrEqualTo: \"must be less than or equal to {{count}}\",\n        otherThan: \"must be other than {{count}}\",\n        odd: \"must be odd\",\n        even: \"must be even\",\n        url: \"is not a valid URL\"\n      }\n    };\n  });//# sourceURL=ember-validations/messages.js");

;eval("define(\"ember-validations/patterns\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Namespace.create({\n      numericality: /^(-|\\+)?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d*)?$/,\n      blank: /^\\s*$/\n    });\n  });//# sourceURL=ember-validations/patterns.js");

;eval("define(\"ember-validations/validators/local/absence\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', {});\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'present\', this.options));\n        }\n      },\n      call: function() {\n        if (!Ember.isEmpty(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/absence.js");

;eval("define(\"ember-validations/validators/local/acceptance\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', {});\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'accepted\', this.options));\n        }\n      },\n      call: function() {\n        if (this.options.accept) {\n          if (get(this.model, this.property) !== this.options.accept) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (get(this.model, this.property) !== \'1\' && get(this.model, this.property) !== 1 && get(this.model, this.property) !== true) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/acceptance.js");

;eval("define(\"ember-validations/validators/local/confirmation\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this.originalProperty = this.property;\n        this.property = this.property + \'Confirmation\';\n        this._super();\n        this.dependentValidationKeys.pushObject(this.originalProperty);\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', { attribute: this.originalProperty });\n          set(this, \'options\', { message: Messages.render(\'confirmation\', this.options) });\n        }\n      },\n      call: function() {\n        if (get(this.model, this.originalProperty) !== get(this.model, this.property)) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/confirmation.js");

;eval("define(\"ember-validations/validators/local/exclusion\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === Array) {\n          set(this, \'options\', { \'in\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'exclusion\', this.options));\n        }\n      },\n      call: function() {\n        /*jshint expr:true*/\n        var lower, upper;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'in\']) {\n          if (Ember.$.inArray(get(this.model, this.property), this.options[\'in\']) !== -1) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options.range) {\n          lower = this.options.range[0];\n          upper = this.options.range[1];\n\n          if (get(this.model, this.property) >= lower && get(this.model, this.property) <= upper) {\n            this.errors.pushObject(this.options.message);\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/exclusion.js");

;eval("define(\"ember-validations/validators/local/format\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === RegExp) {\n          set(this, \'options\', { \'with\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\',  Messages.render(\'invalid\', this.options));\n        }\n       },\n       call: function() {\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'with\'] && !this.options[\'with\'].test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        } else if (this.options.without && this.options.without.test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/format.js");

;eval("define(\"ember-validations/validators/local/inclusion\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === Array) {\n          set(this, \'options\', { \'in\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'inclusion\', this.options));\n        }\n      },\n      call: function() {\n        var lower, upper;\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'in\']) {\n          if (Ember.$.inArray(get(this.model, this.property), this.options[\'in\']) === -1) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options.range) {\n          lower = this.options.range[0];\n          upper = this.options.range[1];\n\n          if (get(this.model, this.property) < lower || get(this.model, this.property) > upper) {\n            this.errors.pushObject(this.options.message);\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/inclusion.js");

;eval("define(\"ember-validations/validators/local/length\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        var index, key;\n        this._super();\n        /*jshint expr:true*/\n        if (typeof(this.options) === \'number\') {\n          set(this, \'options\', { \'is\': this.options });\n        }\n\n        if (this.options.messages === undefined) {\n          set(this, \'options.messages\', {});\n        }\n\n        for (index = 0; index < this.messageKeys().length; index++) {\n          key = this.messageKeys()[index];\n          if (this.options[key] !== undefined && this.options[key].constructor === String) {\n            this.model.addObserver(this.options[key], this, this._validate);\n          }\n        }\n\n        this.options.tokenizer = this.options.tokenizer || function(value) { return value.split(\'\'); };\n        // if (typeof(this.options.tokenizer) === \'function\') {\n          // debugger;\n          // // this.tokenizedLength = new Function(\'value\', \'return \'\n        // } else {\n          // this.tokenizedLength = new Function(\'value\', \'return (value || \"\").\' + (this.options.tokenizer || \'split(\"\")\') + \'.length\');\n        // }\n      },\n      CHECKS: {\n        \'is\'      : \'==\',\n        \'minimum\' : \'>=\',\n        \'maximum\' : \'<=\'\n      },\n      MESSAGES: {\n        \'is\'      : \'wrongLength\',\n        \'minimum\' : \'tooShort\',\n        \'maximum\' : \'tooLong\'\n      },\n      getValue: function(key) {\n        if (this.options[key].constructor === String) {\n          return get(this.model, this.options[key]) || 0;\n        } else {\n          return this.options[key];\n        }\n      },\n      messageKeys: function() {\n        return Ember.keys(this.MESSAGES);\n      },\n      checkKeys: function() {\n        return Ember.keys(this.CHECKS);\n      },\n      renderMessageFor: function(key) {\n        var options = {count: this.getValue(key)}, _key;\n        for (_key in this.options) {\n          options[_key] = this.options[_key];\n        }\n\n        return this.options.messages[this.MESSAGES[key]] || Messages.render(this.MESSAGES[key], options);\n      },\n      renderBlankMessage: function() {\n        if (this.options.is) {\n          return this.renderMessageFor(\'is\');\n        } else if (this.options.minimum) {\n          return this.renderMessageFor(\'minimum\');\n        }\n      },\n      call: function() {\n        var fn, operator, key;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined && (this.options.is || this.options.minimum)) {\n            this.errors.pushObject(this.renderBlankMessage());\n          }\n        } else {\n          for (key in this.CHECKS) {\n            operator = this.CHECKS[key];\n            if (!this.options[key]) {\n              continue;\n            }\n\n            fn = new Function(\'return \' + this.options.tokenizer(get(this.model, this.property)).length + \' \' + operator + \' \' + this.getValue(key));\n            if (!fn()) {\n              this.errors.pushObject(this.renderMessageFor(key));\n            }\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/length.js");

;eval("define(\"ember-validations/validators/local/numericality\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"ember-validations/patterns\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n    var Patterns = __dependency4__[\"default\"];\n\n    var get = Ember.get;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        /*jshint expr:true*/\n        var index, keys, key;\n        this._super();\n\n        if (this.options === true) {\n          this.options = {};\n        } else if (this.options.constructor === String) {\n          key = this.options;\n          this.options = {};\n          this.options[key] = true;\n        }\n\n        if (this.options.messages === undefined || this.options.messages.numericality === undefined) {\n          this.options.messages = this.options.messages || {};\n          this.options.messages = { numericality: Messages.render(\'notANumber\', this.options) };\n        }\n\n        if (this.options.onlyInteger !== undefined && this.options.messages.onlyInteger === undefined) {\n          this.options.messages.onlyInteger = Messages.render(\'notAnInteger\', this.options);\n        }\n\n        keys = Ember.keys(this.CHECKS).concat([\'odd\', \'even\']);\n        for(index = 0; index < keys.length; index++) {\n          key = keys[index];\n\n          var prop = this.options[key];\n          // I have no idea what the hell is going on here. This seems to do nothing.\n          // The observer\'s key is being set to the values in the options hash?\n          if (key in this.options && isNaN(prop)) {\n            this.model.addObserver(prop, this, this._validate);\n          }\n\n          if (prop !== undefined && this.options.messages[key] === undefined) {\n            if (Ember.$.inArray(key, Ember.keys(this.CHECKS)) !== -1) {\n              this.options.count = prop;\n            }\n            this.options.messages[key] = Messages.render(key, this.options);\n            if (this.options.count !== undefined) {\n              delete this.options.count;\n            }\n          }\n        }\n      },\n      CHECKS: {\n        equalTo              :\'===\',\n        greaterThan          : \'>\',\n        greaterThanOrEqualTo : \'>=\',\n        lessThan             : \'<\',\n        lessThanOrEqualTo    : \'<=\'\n      },\n      call: function() {\n        var check, checkValue, fn, operator;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.messages.numericality);\n          }\n        } else if (!Patterns.numericality.test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.messages.numericality);\n        } else if (this.options.onlyInteger === true && !(/^[+\\-]?\\d+$/.test(get(this.model, this.property)))) {\n          this.errors.pushObject(this.options.messages.onlyInteger);\n        } else if (this.options.odd  && parseInt(get(this.model, this.property), 10) % 2 === 0) {\n          this.errors.pushObject(this.options.messages.odd);\n        } else if (this.options.even && parseInt(get(this.model, this.property), 10) % 2 !== 0) {\n          this.errors.pushObject(this.options.messages.even);\n        } else {\n          for (check in this.CHECKS) {\n            operator = this.CHECKS[check];\n\n            if (this.options[check] === undefined) {\n              continue;\n            }\n\n            if (!isNaN(parseFloat(this.options[check])) && isFinite(this.options[check])) {\n              checkValue = this.options[check];\n            } else if (get(this.model, this.options[check]) !== undefined) {\n              checkValue = get(this.model, this.options[check]);\n            }\n\n            fn = new Function(\'return \' + get(this.model, this.property) + \' \' + operator + \' \' + checkValue);\n\n            if (!fn()) {\n              this.errors.pushObject(this.options.messages[check]);\n            }\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/numericality.js");

;eval("define(\"ember-validations/validators/local/presence\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          this.options = {};\n        }\n\n        if (this.options.message === undefined) {\n          this.options.message = Messages.render(\'blank\', this.options);\n        }\n      },\n      call: function() {\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/presence.js");

;eval("define(\"ember-validations\", [\"ember-validations/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n//# sourceURL=__reexport.js");
