eval("define(\"ember-cli-filtertable/components/action-button\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Component.extend({\n      tagName: \'button\',\n      classNames: [\'btn\'],\n      classNameBindings: [\'selectedClass\'],\n      attributeBindings: [\'isDisabled:disabled\'],\n      isDisabled: function() {\n        return this.get(\'isButtonActive\') === false;\n      }.property(\'isButtonActive\'),\n      selectedClass: function() {\n        var c = (this.get(\'isButtonActive\') === true) ?\n               this.get(\'activeClass\') : \'btn-default\';\n        if (this.get(\'isSet\') === true) {\n          c += \' active\';\n        }\n        return c;\n      }.property(\'isButtonActive\', \'isSet\'),\n\n      /* User variables */\n      activeClass: \'btn-primary\',\n      isButtonActive: function() {\n        var key = this.get(\'buttonToggleName\');\n        return Em.isBlank(key) ? true : this.get(key);\n      }.property(\'targetObject.selectedRecords.@each\'),\n      buttonToggleName: function() {\n        if (Em.isBlank(this.get(\'isActive\'))) {\n          Em.debug(\"No isActive function for action button %@\".fmt(this.get(\'title\')));\n          return null;\n        }\n        var activeFn = \'targetObject.%@\'.fmt(this.get(\'isActive\'));\n        if (!Em.isBlank(this.get(activeFn))) {\n          return activeFn;\n        }\n        activeFn = \'targetObject.%@\'.fmt(activeFn);\n        // custom handler on controller\n        if (!Em.isBlank(this.get(activeFn))) {\n          return activeFn;\n        }\n        // no handler found\n        return null;\n      }.property(),\n      hasGlyph: function() {\n        return (!Em.isBlank(this.get(\'glyphicon\')));\n      }.property(\'glyphicon\'),\n      action: null,\n      click: function() {\n        if (Em.isBlank(this.get(\'action\'))) {\n          Em.debug(\"No action defined for \" + this.get(\'title\'));\n          alert(\"Not yet implemented\");\n          return;\n        }\n        // This component can lie either in the controller or in the filter table\n        // component. We assume its in the filter table, but if not, the controller\n        // is the relevant targetObject\n        var t = this.get(\'targetObject\');\n        t = (t.get(\'targetObject\') === undefined) ? t : t.get(\'targetObject\');\n        t.send(this.get(\'action\'));\n      }\n    });\n  });//# sourceURL=ember-cli-filtertable/components/action-button.js");

;eval("define(\"ember-cli-filtertable/components/filter-table\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Component.extend({\n      /* System settings */\n      layoutName: \'components/filter-table\',\n      selectAll: false,  // select-all button off by default\n      deselectAll: false,  // toggle for deselecting all (w/o all being selected)\n      selectedRecords: Em.A([]),\n      updateSelectedRecords: function() {\n        var sr = this.get(\'selectedRecords\'),\n            fr = this.get(\'filteredRecords\');\n        Em.run.once(function() {\n          sr.clear();\n          sr.addObjects(fr.filterBy(\'selected\', true));\n          Em.debug(\"Selected: %@\".fmt(sr.get(\'length\')));\n        });\n      }.observes(\'filteredRecords.@each.selected\'),\n      loadSelectedRecordsOnController: function() {\n        var to = this.get(\'targetObject\');\n        if (to === undefined || to === null) {\n          Em.debug(\"WARNING: no target object found. Are we testing?\");\n          return;\n        }\n        if (Em.isBlank(to.get(\'selectedRecords\'))) {\n          this.set(\'targetObject.selectedRecords\', this.get(\'selectedRecords\'));\n        }\n      }.on(\'init\'),\n      isTree: false,\n      showSearchAncestors: true,\n\n      /* General table settings */\n      viewLimit: 20,\n      columnNum: 2,\n      headerFilterColspan: function() {\n        var diff = (this.get(\'showCheckboxes\')) ? 1 : 0;\n        return this.get(\'columnNum\') + diff;\n      }.property(\'columnNum\'),\n\n      /* Elements pertaining to the input box used for filtereing results */\n      showTextFilter: true,\n      textFilter: \"\",  // The search bar at the top for filtering\n      filterField: \'name\',\n\n      /* Checkbox select/deselect all logic */\n      showCheckboxes: true,\n      noneSelected: function() {\n        return this.get(\'selectedRecords.length\') < 1;\n      }.property(\'selectedRecords.@each\'),\n      oneSelected: function() {\n        return this.get(\'selectedRecords.length\') === 1;\n      }.property(\'selectedRecords.@each\'),\n      oneOrMoreSelected: function() {\n        return this.get(\'selectedRecords.length\') > 0;\n      }.property(\'selectedRecords.@each\'),\n      allSelected: function() {\n        return this.get(\'selectedRecords.length\') ===\n               this.get(\'filteredRecords.length\');\n      }.property(\'selectedRecords.@each\', \'filteredRecords.@each\'),\n\n      /* Tree view settings */\n      applyTreeFilter: function(records) {\n        /* All expand/collapse logic is done here. We don\'t dynamically add records\n         * in the template. Instead we add them to the list here and rely on the\n         * sorting by depth first to ensure the correct order.\n         */\n        if (this.get(\'isTree\') === false) {\n          return records;\n        }\n        function getSubtree(record) {\n          // Returns an array containing the whole subtree of the parent\n          var records = [record];\n          if (record.get(\'isExpanded\') === true) {\n            // This needs to become a promise for async references\n            record.get(\'children.content\').forEach(function(child) {\n              records = records.concat(getSubtree(child));\n            });\n          }\n          return records;\n        }\n        function isAncestor(node, filterResults) {\n          var _isAncestor = false;\n          node.get(\'children\').forEach(function(child) {\n            if (filterResults.indexOf(child) > -1) {\n              // this is a direct parent of a search result\n              _isAncestor = true;\n            }\n            if (isAncestor(child, filterResults) === true) {\n              // this child is a distant ancestor;\n              _isAncestor = true;\n            }\n          });\n          return _isAncestor;\n        }\n\n        function getAncestors(node, filterResults) {\n          var ancestors = [];\n\n\n          if (filterResults.indexOf(node) > -1) {\n            ancestors.push(node);\n          } else {\n            if (isAncestor(node, filterResults)) {\n              ancestors.push(node);\n              var childAncestors = [];\n              node.get(\'children\').forEach(function(child) {\n                childAncestors = childAncestors.concat( getAncestors(child, filterResults));\n              });\n              ancestors = ancestors.concat(childAncestors);\n            }\n          }\n          return ancestors;\n        }\n\n        var finalGroups = Em.A([]);\n        Em.debug(\"If text filter is empty, display root nodes\");\n        if (Em.isBlank(this.get(\'textFilter\'))) {\n          // work off the root nodes\n          records.forEach(function(r) {\n            if (r.get(\'depth\') < 2) {\n              finalGroups = finalGroups.concat(getSubtree(r));\n            }\n          });\n        } else {\n          if (this.get(\'showSearchAncestors\') === false) {\n            // show only matching search results\n            finalGroups = records;\n          } else {\n            // Construct a tree containing the ancestry lines of the matching\n            // search results. We do this by traversing the tree from all the roots\n            var roots = this.get(\'_prefilterRecords\').filterBy(\'depth\', 1);\n\n            Em.debug(\'- Getting ancestry -\');\n            roots.forEach(function(r) {\n              Em.debug(\'  %@\'.fmt(r.get(\'name\')));\n              finalGroups = finalGroups.concat(getAncestors(r, records));\n            });\n          }\n        }\n\n        return finalGroups;\n      },\n\n      filteredRecords: Em.A([]), // Displayed records\n      toggleAllSelection: function() {\n        // Called when selectAll checkbox is toggled and ensures all records\'\n        // selection status matches that decreed by the select-all button\n        var fRecords = this.get(\'filteredRecords\'),\n            sRecords = this.get(\'selectedRecords\'),\n            aRecords = this.get(\'content\').filterBy(\'selected\', true);\n        Em.debug(\"Select-all checkbox selected? %@\".fmt(this.get(\'selectAll\')));\n        Em.run.once(this, function() {\n          if (this.get(\'selectAll\') === true) {\n            // Select-all button checked, ensure that all visible records are\n            // selected, and invisible records are unchecked\n            if (sRecords.get(\'length\') === fRecords.get(\'length\')) {\n              // all records are already selected\n              return;\n            }\n            // unselecting hidden records, and select all visible records\n            aRecords.forEach(function(r) {\n              r.set(\'selected\', false);\n            });\n            fRecords.forEach(function(r) {\n              r.set(\'selected\', true);\n            });\n          } else {\n            // select-all is unchecked, so lets unselect all if all visible records\n            // are selected\n            if (sRecords.get(\'length\') === fRecords.get(\'length\')) {\n              // deselect-all since all are selected\n              aRecords.forEach(function(r) {\n                r.set(\'selected\', false);\n              });\n            }\n          }\n        });\n      }.observes(\'selectAll\'),\n      toggleSelectAllCheckbox: function() {\n        Em.run.once(this, function() {\n          var as = this.get(\'allSelected\'), sa = this.get(\'selectAll\');\n          if (as !== sa) {\n            Em.debug(\"Set select-all checkbox to table state\");\n            this.set(\'selectAll\', as);\n          }\n        });\n      }.observes(\'selectedRecords.@each\'),\n      deselectAllRecords: function() {\n        if (this.get(\'deselectAll\') !== true) {\n          // only run this when deselectAll is set to true. it is automatically\n          // returned to false once everything has been deselected;\n          return;\n        }\n        // Explicitly deselect all. Just setting selectAll to false isn\'t\n        // sufficient since not all records may be selected at this point\n        if (this.get(\'selectAll\') === true) {\n          // all records are selected, so we can simply deselect them all\n          this.set(\'selectAll\', false);\n        } else {\n          var aRecords = this.get(\'content\').filterBy(\'selected\', true);\n          aRecords.forEach(function(r) {\n            r.set(\'selected\', false);\n          });\n        }\n        this.set(\'deselectAll\', false);\n      }.observes(\'deselectAll\'),\n      hasNoFilteredRecords: function() {\n        return this.get(\'filteredRecords.length\') < 1;\n      }.property(\'filteredRecords.@each\'),\n      hasNoActualRecords: function() {\n        return this.get(\'content\').get(\'length\') < 1;\n      }.property(\'content.@each\'),\n      applyTextFilter: function(ac) {\n        var filter = this.get(\'textFilter\');\n        if (!Em.isBlank(filter)) {\n          Em.debug(\"Applying text filter to records\");\n          filter = filter.toLowerCase();\n          var ff = this.get(\'filterField\');\n          ac = ac.filter(function(record) {\n            if (Em.isBlank(record) || Em.isBlank(record.get(ff))) {\n              return false;\n            }\n            return record.get(ff).toLowerCase().indexOf(filter) > -1;\n          });\n        }\n        return ac;\n      },\n      loadRecords: function() {\n        Em.debug(\'Refreshing visible records\');\n        if (this.get(\'_ignoreReload\') === true) {\n          Em.debug(\"Don\'t reload for targetObject.reload value change\");\n          this.set(\'_ignoreReload\', false);\n          return;\n        }\n        if (this.get(\'reloadRecords\') === true) {\n          this.set(\'_ignoreReload\', true);\n          this.set(\'reloadRecords\', false);\n        }\n        var ac = this.get(\'arrangedContent\') ||\n                 this.get(\'content.arrangedContent\') ||\n                 this.get(\'content\');\n        if (Em.isEmpty(ac)) {\n          this.set(\'filteredRecords\', []);\n          return;\n        }\n        ac = ac.toArray();  // make copy of the content record\n        this.set(\'_prefilterRecords\', ac);\n        ac = this.applyTextFilter(ac);\n        if (!Em.isBlank(this.get(\'targetObject.applyDropdownFilter\'))) {\n          ac = this.get(\'targetObject\').applyDropdownFilter(ac);\n        }\n        if (ac.then === undefined) {\n          this.showFilteredRecords(ac);\n        } else {\n          var that = this;\n          ac.then(function(records) {\n            that.showFilteredRecords(records.get(\'content\') || records);\n          });\n        }\n      }.observes(\'textFilter\', \'reloadRecords\'),\n      showFilteredRecords: function(records) {\n        records = this.applyTreeFilter(records);\n        Em.debug(\"Showing filteredRecords\");\n        var vl = this.get(\'viewLimit\');\n        if (vl > 0 && records.get(\'length\') > this.get(\'viewLimit\')) {\n          Em.debug(\"\\tChopping records to viewLimit\");\n          records = records.splice(0, this.get(\'viewLimit\'));\n        }\n        this.set(\'filteredRecords\', Em.A(records));\n      },\n      loadOnContentChange: function() {\n        if (Em.isEmpty(this.get(\'content\'))) {\n          return;\n        }\n        Em.run.once(this, \'loadRecords\');\n      }.on(\'init\').observes(\'content.@each\'),\n      actions: {\n        // custom actions which the user can implement. Its a direct link to a\n        // controller action handler\n        submit: function(actionName, record) {\n          this.get(\'targetObject\').send(actionName, record);\n        },\n        remove: function(actionName, record) {\n          this.get(\'targetObject\').send(actionName, record);\n        },\n        toggleExpand: function(record) {\n          Em.debug(\"Expanding/Collapsing record\");\n          var e = record.get(\'isExpanded\') || false;\n          if (record.get(\'childNum\') < 1) {\n            Em.debug(\"Cannot expand record without children\");\n            return;\n          }\n          record.set(\'isExpanded\', !e);\n          this.set(\'reloadRecords\', true);\n        }\n      }\n    });\n  });//# sourceURL=ember-cli-filtertable/components/filter-table.js");

;eval("define(\"ember-cli-filtertable/helpers/tree-tab\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    // Show the expand/contract arrow and tab the colum to the relevant depth\n    __exports__[\"default\"] = Em.Handlebars.makeBoundHelper(function(record) {\n      var txt = \'<span style=\"padding-left: %@em;\">%@</span>\',\n          indent = Math.max(0, record.get(\'depth\')-1 * 1.2),  // default indent is 1.2 em;\n          isExpanded = record.get(\'isExpanded\') || false;\n      if (record.get(\'childNum\') < 1) {\n        txt = txt.fmt(indent, \'- \');\n      } else if (isExpanded === true) {\n        txt = txt.fmt(indent, \'# \');\n      } else {\n        txt = txt.fmt(indent, \'+ \');\n      }\n      return new Em.Handlebars.SafeString(txt);\n    });\n  });//# sourceURL=ember-cli-filtertable/helpers/tree-tab.js");

;eval("define(\"ember-cli-filtertable\", [\"ember-cli-filtertable/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n//# sourceURL=__reexport.js");

eval("define(\"ember-cli-typeahead/components/type-ahead\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var substringMatcher = function(data, key) {\n      return function findMatches(q, cb) {\n        var matches = [],  substrRegex = new RegExp(q, \'i\');\n\n        // iterate through objects to match the matching\n        data.forEach(function(obj) {\n          var str = Em.isEmpty(obj.get(key)) ? obj : obj.get(key);\n          if (substrRegex.test(str)) {\n            var x = {obj: obj};\n            x[key] = str;\n            matches.push(x);\n          }\n        });\n\n        cb(matches);\n      };\n    };\n\n    __exports__[\"default\"] = Em.TextField.extend({\n      highlight: false,\n      hint: true,\n      minLength: 1,\n      autofocus: true,\n      _typeahead: null,\n      selection: null,\n      didInsertElement: function() {\n        this._super();\n        this.initializeTypeahead();\n        if (this.get(\'autofocus\') === true) {\n          this.$().focus();\n        }\n      },\n      initializeTypeahead: function() {\n        var that=this, t=null,\n            options = {\n              highlight: this.get(\'highlight\'),\n              hint: this.get(\'hint\'),\n              minLength: this.get(\'minLength\')\n            },\n            dataset = this.get(\'dataset\');\n        t = this.$().typeahead(options, dataset);\n        this.set(\'_typeahead\', t);\n\n        // Set selected object\n        t.on(\'typeahead:selected\', function(event, item) {\n          Em.debug(\"Setting suggestion\");\n          that.set(\'selection\', item.obj);\n        });\n\n        t.on(\'typeahead:autocompleted\', function(event, item) {\n          Em.debug(\"Setting suggestion\");\n          that.set(\'selection\', item.obj);\n        });\n      },\n      dataset: function() {\n        var that=this, content=this.get(\'content\');\n\n        if (window.jQuery.isFunction(content.then)) {\n          content.then(function(data) {\n            return that.loadDataset(data);\n          });\n        } else {\n          return this.loadDataset(content);\n        }\n      }.property(),\n      loadDataset: function(content) {\n        var name = this.get(\'name\') || \'default\',\n            key = this.get(\'displayKey\') || \'value\';\n        return {\n          name: name,\n          displayKey: key,\n          source: substringMatcher(content, key)\n        };\n      },\n      clearDataset: function() {\n        if (Em.isBlank(this.get(\'selection\'))) {\n          this.$().val(\'\');\n        }\n      }.observes(\'selection\')\n    });\n  });//# sourceURL=ember-cli-typeahead/components/type-ahead.js");

;eval("define(\"ember-cli-typeahead\", [\"ember-cli-typeahead/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n//# sourceURL=__reexport.js");

eval("define(\"ember-validations/errors\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      unknownProperty: function(property) {\n        set(this, property, Ember.A());\n        return get(this, property);\n      }\n    });\n  });//# sourceURL=ember-validations/errors.js");

;eval("define(\"ember-validations/index\", \n  [\"ember-validations/mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Mixin = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      Mixin: Mixin,\n      validator: function(callback) {\n        return { callback: callback };\n      }\n    };\n  });//# sourceURL=ember-validations/index.js");

;eval("define(\"ember-validations/mixin\", \n  [\"ember\",\"ember-validations/errors\",\"ember-validations/validators/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Errors = __dependency2__[\"default\"];\n    var Base = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    var setValidityMixin = Ember.Mixin.create({\n      isValid: Ember.computed(\'validators.@each.isValid\', function() {\n        var compactValidators = get(this, \'validators\').compact();\n        var filteredValidators = Ember.EnumerableUtils.filter(compactValidators, function(validator) {\n          return !get(validator, \'isValid\');\n        });\n\n        return get(filteredValidators, \'length\') === 0;\n      }),\n      isInvalid: Ember.computed.not(\'isValid\')\n    });\n\n    var pushValidatableObject = function(model, property) {\n      var content = get(model, property);\n\n      model.removeObserver(property, pushValidatableObject);\n      if (Ember.isArray(content)) {\n        model.validators.pushObject(ArrayValidatorProxy.create({model: model, property: property, contentBinding: \'model.\' + property}));\n      } else {\n        model.validators.pushObject(content);\n      }\n    };\n\n    var lookupValidator = function(validatorName) {\n      var container = get(this, \'container\');\n      var local = container.lookupFactory(\'validator:local/\'+validatorName);\n      var remote = container.lookupFactory(\'validator:remote/\'+validatorName);\n\n      if (local || remote) { return [local, remote]; }\n\n      var base = container.lookupFactory(\'validator:\'+validatorName);\n\n      if (base) { return [base]; }\n\n      local = container.lookupFactory(\'ember-validations@validator:local/\'+validatorName);\n      remote = container.lookupFactory(\'ember-validations@validator:remote/\'+validatorName);\n\n      if (local || remote) { return [local, remote]; }\n\n      Ember.warn(\'Could not the \"\'+validatorName+\'\" validator.\');\n    };\n\n    var ArrayValidatorProxy = Ember.ArrayProxy.extend(setValidityMixin, {\n      validate: function() {\n        return this._validate();\n      },\n      _validate: Ember.on(\'init\', function() {\n        var promises = get(this, \'content\').invoke(\'_validate\').without(undefined);\n        return Ember.RSVP.all(promises);\n      }),\n      validators: Ember.computed.alias(\'content\')\n    });\n\n    __exports__[\"default\"] = Ember.Mixin.create(setValidityMixin, {\n      init: function() {\n        this._super();\n        this.errors = Errors.create();\n        this.dependentValidationKeys = {};\n        this.validators = Ember.A();\n        if (get(this, \'validations\') === undefined) {\n          this.validations = {};\n        }\n        this.buildValidators();\n        this.validators.forEach(function(validator) {\n          validator.addObserver(\'errors.[]\', this, function(sender) {\n            var errors = Ember.A();\n            this.validators.forEach(function(validator) {\n              if (validator.property === sender.property) {\n                errors.addObjects(validator.errors);\n              }\n            }, this);\n            set(this, \'errors.\' + sender.property, errors);\n          });\n        }, this);\n      },\n      buildValidators: function() {\n        var property;\n\n        for (property in this.validations) {\n          if (this.validations[property].constructor === Object) {\n            this.buildRuleValidator(property);\n          } else {\n            this.buildObjectValidator(property);\n          }\n        }\n      },\n      buildRuleValidator: function(property) {\n        var pushValidator = function(validator) {\n          if (validator) {\n            this.validators.pushObject(validator.create({model: this, property: property, options: this.validations[property][validatorName]}));\n          }\n        };\n\n        if (this.validations[property].callback) {\n          this.validations[property] = { inline: this.validations[property] };\n        }\n\n        var createInlineClass = function(callback) {\n          return Base.extend({\n            call: function() {\n              var errorMessage = this.callback.call(this);\n\n              if (errorMessage) {\n                this.errors.pushObject(errorMessage);\n              }\n            },\n            callback: callback\n          });\n        };\n\n        for (var validatorName in this.validations[property]) {\n          if (validatorName === \'inline\') {\n            pushValidator.call(this, createInlineClass(this.validations[property][validatorName].callback));\n          } else if (this.validations[property].hasOwnProperty(validatorName)) {\n            Ember.EnumerableUtils.forEach(lookupValidator.call(this, validatorName), pushValidator, this);\n          }\n        }\n      },\n      buildObjectValidator: function(property) {\n        if (Ember.isNone(get(this, property))) {\n          this.addObserver(property, this, pushValidatableObject);\n        } else {\n          pushValidatableObject(this, property);\n        }\n      },\n      validate: function() {\n        var self = this;\n        return this._validate().then(function(vals) {\n          var errors = get(self, \'errors\');\n          if (Ember.EnumerableUtils.indexOf(vals, false) > -1) {\n            return Ember.RSVP.reject(errors);\n          }\n          return errors;\n        });\n      },\n      _validate: Ember.on(\'init\', function() {\n        var promises = this.validators.invoke(\'_validate\').without(undefined);\n        return Ember.RSVP.all(promises);\n      })\n    });\n  });//# sourceURL=ember-validations/mixin.js");

;eval("define(\"ember-validations/validators/base\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      init: function() {\n        set(this, \'errors\', Ember.A());\n        this.dependentValidationKeys = Ember.A();\n        this.conditionals = {\n          \'if\': get(this, \'options.if\'),\n          unless: get(this, \'options.unless\')\n        };\n        this.model.addObserver(this.property, this, this._validate);\n      },\n      addObserversForDependentValidationKeys: Ember.on(\'init\', function() {\n        this.dependentValidationKeys.forEach(function(key) {\n          this.model.addObserver(key, this, this._validate);\n        }, this);\n      }),\n      pushDependentValidationKeyToModel: Ember.on(\'init\', function() {\n        var model = get(this, \'model\');\n        if (model.dependentValidationKeys[this.property] === undefined) {\n          model.dependentValidationKeys[this.property] = Ember.A();\n        }\n        model.dependentValidationKeys[this.property].addObjects(this.dependentValidationKeys);\n      }),\n      call: function () {\n        throw \'Not implemented!\';\n      },\n      unknownProperty: function(key) {\n        var model = get(this, \'model\');\n        if (model) {\n          return get(model, key);\n        }\n      },\n      isValid: Ember.computed.empty(\'errors.[]\'),\n      validate: function() {\n        var self = this;\n        return this._validate().then(function(success) {\n          // Convert validation failures to rejects.\n          var errors = get(self, \'model.errors\');\n          if (success) {\n            return errors;\n          } else {\n            return Ember.RSVP.reject(errors);\n          }\n        });\n      },\n      _validate: Ember.on(\'init\', function() {\n        this.errors.clear();\n        if (this.canValidate()) {\n          this.call();\n        }\n        if (get(this, \'isValid\')) {\n          return Ember.RSVP.resolve(true);\n        } else {\n          return Ember.RSVP.resolve(false);\n        }\n      }),\n      canValidate: function() {\n        if (typeof(this.conditionals) === \'object\') {\n          if (this.conditionals[\'if\']) {\n            if (typeof(this.conditionals[\'if\']) === \'function\') {\n              return this.conditionals[\'if\'](this.model, this.property);\n            } else if (typeof(this.conditionals[\'if\']) === \'string\') {\n              if (typeof(this.model[this.conditionals[\'if\']]) === \'function\') {\n                return this.model[this.conditionals[\'if\']]();\n              } else {\n                return get(this.model, this.conditionals[\'if\']);\n              }\n            }\n          } else if (this.conditionals.unless) {\n            if (typeof(this.conditionals.unless) === \'function\') {\n              return !this.conditionals.unless(this.model, this.property);\n            } else if (typeof(this.conditionals.unless) === \'string\') {\n              if (typeof(this.model[this.conditionals.unless]) === \'function\') {\n                return !this.model[this.conditionals.unless]();\n              } else {\n                return !get(this.model, this.conditionals.unless);\n              }\n            }\n          } else {\n            return true;\n          }\n        } else {\n          return true;\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/base.js");

;eval("define(\"ember-validations/messages\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      render: function(attribute, context) {\n        if (Ember.I18n) {\n          return Ember.I18n.t(\'errors.\' + attribute, context);\n        } else {\n          var regex = new RegExp(\"{{(.*?)}}\"),\n              attributeName = \"\";\n          if (regex.test(this.defaults[attribute])) {\n            attributeName = regex.exec(this.defaults[attribute])[1];\n          }\n          return this.defaults[attribute].replace(regex, context[attributeName]);\n        }\n      },\n      defaults: {\n        inclusion: \"is not included in the list\",\n        exclusion: \"is reserved\",\n        invalid: \"is invalid\",\n        confirmation: \"doesn\'t match {{attribute}}\",\n        accepted: \"must be accepted\",\n        empty: \"can\'t be empty\",\n        blank: \"can\'t be blank\",\n        present: \"must be blank\",\n        tooLong: \"is too long (maximum is {{count}} characters)\",\n        tooShort: \"is too short (minimum is {{count}} characters)\",\n        wrongLength: \"is the wrong length (should be {{count}} characters)\",\n        notANumber: \"is not a number\",\n        notAnInteger: \"must be an integer\",\n        greaterThan: \"must be greater than {{count}}\",\n        greaterThanOrEqualTo: \"must be greater than or equal to {{count}}\",\n        equalTo: \"must be equal to {{count}}\",\n        lessThan: \"must be less than {{count}}\",\n        lessThanOrEqualTo: \"must be less than or equal to {{count}}\",\n        otherThan: \"must be other than {{count}}\",\n        odd: \"must be odd\",\n        even: \"must be even\",\n        url: \"is not a valid URL\"\n      }\n    };\n  });//# sourceURL=ember-validations/messages.js");

;eval("define(\"ember-validations/patterns\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Namespace.create({\n      numericality: /^(-|\\+)?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d*)?$/,\n      blank: /^\\s*$/\n    });\n  });//# sourceURL=ember-validations/patterns.js");

;eval("define(\"ember-validations/validators/local/absence\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', {});\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'present\', this.options));\n        }\n      },\n      call: function() {\n        if (!Ember.isEmpty(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/absence.js");

;eval("define(\"ember-validations/validators/local/acceptance\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', {});\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'accepted\', this.options));\n        }\n      },\n      call: function() {\n        if (this.options.accept) {\n          if (get(this.model, this.property) !== this.options.accept) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (get(this.model, this.property) !== \'1\' && get(this.model, this.property) !== 1 && get(this.model, this.property) !== true) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/acceptance.js");

;eval("define(\"ember-validations/validators/local/confirmation\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this.originalProperty = this.property;\n        this.property = this.property + \'Confirmation\';\n        this._super();\n        this.dependentValidationKeys.pushObject(this.originalProperty);\n        /*jshint expr:true*/\n        if (this.options === true) {\n          set(this, \'options\', { attribute: this.originalProperty });\n          set(this, \'options\', { message: Messages.render(\'confirmation\', this.options) });\n        }\n      },\n      call: function() {\n        if (get(this.model, this.originalProperty) !== get(this.model, this.property)) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/confirmation.js");

;eval("define(\"ember-validations/validators/local/exclusion\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === Array) {\n          set(this, \'options\', { \'in\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'exclusion\', this.options));\n        }\n      },\n      call: function() {\n        /*jshint expr:true*/\n        var lower, upper;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'in\']) {\n          if (Ember.$.inArray(get(this.model, this.property), this.options[\'in\']) !== -1) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options.range) {\n          lower = this.options.range[0];\n          upper = this.options.range[1];\n\n          if (get(this.model, this.property) >= lower && get(this.model, this.property) <= upper) {\n            this.errors.pushObject(this.options.message);\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/exclusion.js");

;eval("define(\"ember-validations/validators/local/format\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === RegExp) {\n          set(this, \'options\', { \'with\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\',  Messages.render(\'invalid\', this.options));\n        }\n       },\n       call: function() {\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'with\'] && !this.options[\'with\'].test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        } else if (this.options.without && this.options.without.test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/format.js");

;eval("define(\"ember-validations/validators/local/inclusion\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        if (this.options.constructor === Array) {\n          set(this, \'options\', { \'in\': this.options });\n        }\n\n        if (this.options.message === undefined) {\n          set(this, \'options.message\', Messages.render(\'inclusion\', this.options));\n        }\n      },\n      call: function() {\n        var lower, upper;\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options[\'in\']) {\n          if (Ember.$.inArray(get(this.model, this.property), this.options[\'in\']) === -1) {\n            this.errors.pushObject(this.options.message);\n          }\n        } else if (this.options.range) {\n          lower = this.options.range[0];\n          upper = this.options.range[1];\n\n          if (get(this.model, this.property) < lower || get(this.model, this.property) > upper) {\n            this.errors.pushObject(this.options.message);\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/inclusion.js");

;eval("define(\"ember-validations/validators/local/length\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n    var set = Ember.set;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        var index, key;\n        this._super();\n        /*jshint expr:true*/\n        if (typeof(this.options) === \'number\') {\n          set(this, \'options\', { \'is\': this.options });\n        }\n\n        if (this.options.messages === undefined) {\n          set(this, \'options.messages\', {});\n        }\n\n        for (index = 0; index < this.messageKeys().length; index++) {\n          key = this.messageKeys()[index];\n          if (this.options[key] !== undefined && this.options[key].constructor === String) {\n            this.model.addObserver(this.options[key], this, this._validate);\n          }\n        }\n\n        this.options.tokenizer = this.options.tokenizer || function(value) { return value.split(\'\'); };\n        // if (typeof(this.options.tokenizer) === \'function\') {\n          // debugger;\n          // // this.tokenizedLength = new Function(\'value\', \'return \'\n        // } else {\n          // this.tokenizedLength = new Function(\'value\', \'return (value || \"\").\' + (this.options.tokenizer || \'split(\"\")\') + \'.length\');\n        // }\n      },\n      CHECKS: {\n        \'is\'      : \'==\',\n        \'minimum\' : \'>=\',\n        \'maximum\' : \'<=\'\n      },\n      MESSAGES: {\n        \'is\'      : \'wrongLength\',\n        \'minimum\' : \'tooShort\',\n        \'maximum\' : \'tooLong\'\n      },\n      getValue: function(key) {\n        if (this.options[key].constructor === String) {\n          return get(this.model, this.options[key]) || 0;\n        } else {\n          return this.options[key];\n        }\n      },\n      messageKeys: function() {\n        return Ember.keys(this.MESSAGES);\n      },\n      checkKeys: function() {\n        return Ember.keys(this.CHECKS);\n      },\n      renderMessageFor: function(key) {\n        var options = {count: this.getValue(key)}, _key;\n        for (_key in this.options) {\n          options[_key] = this.options[_key];\n        }\n\n        return this.options.messages[this.MESSAGES[key]] || Messages.render(this.MESSAGES[key], options);\n      },\n      renderBlankMessage: function() {\n        if (this.options.is) {\n          return this.renderMessageFor(\'is\');\n        } else if (this.options.minimum) {\n          return this.renderMessageFor(\'minimum\');\n        }\n      },\n      call: function() {\n        var fn, operator, key;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined && (this.options.is || this.options.minimum)) {\n            this.errors.pushObject(this.renderBlankMessage());\n          }\n        } else {\n          for (key in this.CHECKS) {\n            operator = this.CHECKS[key];\n            if (!this.options[key]) {\n              continue;\n            }\n\n            fn = new Function(\'return \' + this.options.tokenizer(get(this.model, this.property)).length + \' \' + operator + \' \' + this.getValue(key));\n            if (!fn()) {\n              this.errors.pushObject(this.renderMessageFor(key));\n            }\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/length.js");

;eval("define(\"ember-validations/validators/local/numericality\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"ember-validations/patterns\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n    var Patterns = __dependency4__[\"default\"];\n\n    var get = Ember.get;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        /*jshint expr:true*/\n        var index, keys, key;\n        this._super();\n\n        if (this.options === true) {\n          this.options = {};\n        } else if (this.options.constructor === String) {\n          key = this.options;\n          this.options = {};\n          this.options[key] = true;\n        }\n\n        if (this.options.messages === undefined || this.options.messages.numericality === undefined) {\n          this.options.messages = this.options.messages || {};\n          this.options.messages = { numericality: Messages.render(\'notANumber\', this.options) };\n        }\n\n        if (this.options.onlyInteger !== undefined && this.options.messages.onlyInteger === undefined) {\n          this.options.messages.onlyInteger = Messages.render(\'notAnInteger\', this.options);\n        }\n\n        keys = Ember.keys(this.CHECKS).concat([\'odd\', \'even\']);\n        for(index = 0; index < keys.length; index++) {\n          key = keys[index];\n\n          var prop = this.options[key];\n          // I have no idea what the hell is going on here. This seems to do nothing.\n          // The observer\'s key is being set to the values in the options hash?\n          if (key in this.options && isNaN(prop)) {\n            this.model.addObserver(prop, this, this._validate);\n          }\n\n          if (prop !== undefined && this.options.messages[key] === undefined) {\n            if (Ember.$.inArray(key, Ember.keys(this.CHECKS)) !== -1) {\n              this.options.count = prop;\n            }\n            this.options.messages[key] = Messages.render(key, this.options);\n            if (this.options.count !== undefined) {\n              delete this.options.count;\n            }\n          }\n        }\n      },\n      CHECKS: {\n        equalTo              :\'===\',\n        greaterThan          : \'>\',\n        greaterThanOrEqualTo : \'>=\',\n        lessThan             : \'<\',\n        lessThanOrEqualTo    : \'<=\'\n      },\n      call: function() {\n        var check, checkValue, fn, operator;\n\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          if (this.options.allowBlank === undefined) {\n            this.errors.pushObject(this.options.messages.numericality);\n          }\n        } else if (!Patterns.numericality.test(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.messages.numericality);\n        } else if (this.options.onlyInteger === true && !(/^[+\\-]?\\d+$/.test(get(this.model, this.property)))) {\n          this.errors.pushObject(this.options.messages.onlyInteger);\n        } else if (this.options.odd  && parseInt(get(this.model, this.property), 10) % 2 === 0) {\n          this.errors.pushObject(this.options.messages.odd);\n        } else if (this.options.even && parseInt(get(this.model, this.property), 10) % 2 !== 0) {\n          this.errors.pushObject(this.options.messages.even);\n        } else {\n          for (check in this.CHECKS) {\n            operator = this.CHECKS[check];\n\n            if (this.options[check] === undefined) {\n              continue;\n            }\n\n            if (!isNaN(parseFloat(this.options[check])) && isFinite(this.options[check])) {\n              checkValue = this.options[check];\n            } else if (get(this.model, this.options[check]) !== undefined) {\n              checkValue = get(this.model, this.options[check]);\n            }\n\n            fn = new Function(\'return \' + get(this.model, this.property) + \' \' + operator + \' \' + checkValue);\n\n            if (!fn()) {\n              this.errors.pushObject(this.options.messages[check]);\n            }\n          }\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/numericality.js");

;eval("define(\"ember-validations/validators/local/presence\", \n  [\"ember\",\"ember-validations/validators/base\",\"ember-validations/messages\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n    var Messages = __dependency3__[\"default\"];\n\n    var get = Ember.get;\n\n    __exports__[\"default\"] = Base.extend({\n      init: function() {\n        this._super();\n        /*jshint expr:true*/\n        if (this.options === true) {\n          this.options = {};\n        }\n\n        if (this.options.message === undefined) {\n          this.options.message = Messages.render(\'blank\', this.options);\n        }\n      },\n      call: function() {\n        if (Ember.isEmpty(get(this.model, this.property))) {\n          this.errors.pushObject(this.options.message);\n        }\n      }\n    });\n  });//# sourceURL=ember-validations/validators/local/presence.js");

;eval("define(\"ember-validations\", [\"ember-validations/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n//# sourceURL=__reexport.js");
